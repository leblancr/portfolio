Portfolio Overview Table
Backend	Frontend	Database	Project / Purpose
Django	HTML/CSS	PostgreSQL	Voting / Polls CRUD app
FastAPI	Svelte	PostgreSQL	crypto-dashboard
Rust Blockchain / Web3 ‚Üí standout skill for niche, high-paying jobs
Flask	Vue.js	MongoDB	Task Manager REST API
Phoenix	LiveView	PostgreSQL	Real-time Crypto Dashboard

| Backend                | Frontend | Database   | Project / Purpose                          |
| ---------------------- | -------- | ---------- | ------------------------------------------ |
| Rust Blockchain / Web3 | ‚Äî        | ‚Äî          | Standout skill for niche, high-paying jobs |
| Phoenix                | LiveView | PostgreSQL | Real-time Crypto Dashboard                 |
| FastAPI                | Svelte   | PostgreSQL | Crypto Dashboard (portfolio project)       |
| Django                 | HTML/CSS | PostgreSQL | Voting / Polls CRUD app                    |
| Flask                  | Vue.js   | MongoDB    | Task Manager REST API                      |



/srv/
‚îú‚îÄ‚îÄ django-polls/       # Django app (PostgreSQL)
/srv/django-polls/
/srv/flask-tasks/
/srv/fastapi-analytics/
/srv/phoenix-crypto/
/srv/rust-whatever/



Primary (now / short term)

    Python + Django

üîπ Secondary (next step / medium term)

    Elixir + Phoenix (LiveView)

        Fantastic for real-time apps (chat, dashboards, collaborative tools).

        Growing community, but still niche ‚Üí less competition, but fewer job openings.

        Learning curve is steeper than Django, but you‚Äôll stand out.

        Great to have as a ‚Äúsecond stack‚Äù in your portfolio, showing versatility.

üîπ Optional (back burner / long term)

    Ruby on Rails

        Still around, mature, good demand (esp. at startups).

        Jobs exist, but it‚Äôs not growing like JS or Python ecosystems.

        If you like the Rails philosophy, it can be worth knowing ‚Äî but Django + Phoenix already cover that style of development.

‚úÖ So the plan:

    Finish + deploy Django project (polls + task manager).

    Get that portfolio piece live.

    Then, once you‚Äôve got something public, branch into Phoenix for your next big project.

That way you‚Äôre not throwing away your Django work, but you also won‚Äôt get stuck in Python forever.
